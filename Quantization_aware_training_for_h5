#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep 23 12:26:47 2020

@author: base
"""

import os
import tensorflow as tf
print(tf.version.VERSION)
if tf.__version__.startswith('1.15'):
    # This prevents some errors that otherwise occur when converting the model with TF 1.15...
    tf.enable_eager_execution() # Only if TF is version 1.15
from pathlib import Path

pretrained_model = tf.saved_model.load(export_dir='VGGmodelTF',tags=None, options=None
)


base_dir_home=Path('/home/base/Documents/Git/Projekte/CelebFaceMatcher/Finetunedata/')
train_dir_home= base_dir_home / 'Train'
test_dir_home= base_dir_home / 'Test'


'''VGGFace models for Keras.

# Notes:
- Utility functions are modified versions of Keras functions [Keras](https://keras.io)

'''

import numpy as np

from tensorflow.keras.utils import get_file
from tensorflow.keras import backend as K

def preprocess_input(x, data_format=None, version=1):
    x_temp = np.copy(x)
    if data_format is None:
        data_format = K.image_data_format()
    assert data_format in {'channels_last', 'channels_first'}

    if version == 1:
        if data_format == 'channels_first':
            x_temp = x_temp[:, ::-1, ...]
            x_temp[:, 0, :, :] -= 93.5940
            x_temp[:, 1, :, :] -= 104.7624
            x_temp[:, 2, :, :] -= 129.1863
        else:
            x_temp = x_temp[..., ::-1]
            x_temp[..., 0] -= 93.5940
            x_temp[..., 1] -= 104.7624
            x_temp[..., 2] -= 129.1863

    elif version == 2:
        if data_format == 'channels_first':
            x_temp = x_temp[:, ::-1, ...]
            x_temp[:, 0, :, :] -= 91.4953
            x_temp[:, 1, :, :] -= 103.8827
            x_temp[:, 2, :, :] -= 131.0912
        else:
            x_temp = x_temp[..., ::-1]
            x_temp[..., 0] -= 91.4953
            x_temp[..., 1] -= 103.8827
            x_temp[..., 2] -= 131.0912
    else:
        raise NotImplementedError

    return x_temp


def Vgg_Preprocess(img):
#     /img = img.astype('float32')
    #img = expand_dims(img, axis=0)
    img = preprocess_input(img, version=2) 
    return img

train_datagen=tf.keras.preprocessing.image.ImageDataGenerator(preprocessing_function=Vgg_Preprocess)

BATCH_SIZE = 32
IMG_SIZE = (224, 224)

train_dataset = train_datagen.flow_from_directory(train_dir_home,
                                             shuffle=True,
                                             batch_size=BATCH_SIZE,
                                             target_size=IMG_SIZE,
                                             seed=42,
                                             )

validation_dataset = train_datagen.flow_from_directory(test_dir_home,
                                             shuffle=True,
                                             batch_size=BATCH_SIZE,
                                             target_size=IMG_SIZE,
                                             seed=42,
                                             )

import tensorflow as tf
import tensorflow_model_optimization as tfmot
import tensorflow.keras.optimizers



#Set which quantisatiomn option you choose. qunatize_model sets everything to default and quantizes the whole model
# Set the pretrained model to quantization state, adding fake nodes
q_aware_model = tfmot.quantization.keras.quantize_model(pretrained_model)

q_aware_model.compile(
    optimizer= 'Adam',
    loss=tf.keras.losses.binary_crossentropy,
    metrics= ['accuracy']
)
#Train or finetune your model now
initial_epochs = 10


history = q_aware_model.fit(train_dataset,
                    epochs=initial_epochs,
                    validation_data=validation_dataset)
